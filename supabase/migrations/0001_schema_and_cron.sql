-- =========================================================
-- CFB Predictor schema (tables + indexes + helpers)
-- Safe to re-run (CREATE IF NOT EXISTS / ADD COLUMN IF NOT EXISTS)
-- =========================================================

-- Extensions used by the optional cron/bot pieces
create extension if not exists pg_cron with schema extensions;
create extension if not exists pg_net  with schema extensions;

-- ---------------------------------------------------------
-- 0) Safety: remove overly-strict CHECK on bet_logs.result
-- ---------------------------------------------------------
alter table if exists public.bet_logs
  drop constraint if exists bet_logs_result_check;

-- ---------------------------------------------------------
-- 1) Model settings (JSON blobs per room)
-- ---------------------------------------------------------
create table if not exists public.model_settings (
  id           bigint generated by default as identity primary key,
  room         text not null,
  base_params  jsonb not null default '{}'::jsonb,
  off_weights  jsonb not null default '{}'::jsonb,
  def_weights  jsonb not null default '{}'::jsonb,
  ts           timestamptz not null default now()
);

create index if not exists idx_model_settings_room_ts
  on public.model_settings (room, ts desc);

alter table public.model_settings disable row level security;

-- ---------------------------------------------------------
-- 2) Bet logs (used by app + bot)
-- ---------------------------------------------------------
create table if not exists public.bet_logs (
  id bigint generated by default as identity primary key,
  timestamp timestamptz default now(),
  room text not null,
  bettor text,
  home text,
  away text,
  bet_type text,
  pick text,
  odds int,
  stake numeric,
  model_spread numeric,
  model_total  numeric,
  blended_spread numeric,
  blended_total  numeric,
  recommendation text,
  ev_best numeric,
  description text,
  result text default 'pending'   -- pending|win|loss|push (+ any future labels)
);

create index if not exists idx_bet_logs_room_ts
  on public.bet_logs(room, timestamp desc);

create index if not exists idx_bet_logs_room_result_ts
  on public.bet_logs(room, result, timestamp desc);

create index if not exists idx_bet_logs_room_bettor_ts
  on public.bet_logs(room, bettor, timestamp desc);

alter table public.bet_logs disable row level security;

-- ---------------------------------------------------------
-- 3) Saved projections (UI manager in the app)
--    + all new context columns used by the latest app.py
-- ---------------------------------------------------------
create table if not exists public.saved_projections (
  id bigint generated by default as identity primary key,
  timestamp timestamptz default now(),
  room text not null,
  home text,
  away text,
  proj_home numeric,
  proj_away numeric,
  model_spread numeric,
  model_total numeric,
  blended_spread numeric,
  blended_total numeric,
  winner text,
  recommendation text,
  ev_best numeric,
  weather_mult numeric,
  hfa_points numeric,
  n_sims int,
  seed int
);

-- New context columns (idempotent ALTERs)
alter table public.saved_projections
  add column if not exists market_spread_home numeric,
  add column if not exists market_total numeric,
  add column if not exists market_weight numeric,
  add column if not exists spread_odds int,
  add column if not exists total_odds int,
  add column if not exists temp_f numeric,
  add column if not exists wind_mph numeric,
  add column if not exists precip text,
  add column if not exists indoor boolean,
  add column if not exists neutral boolean;

-- Optional free-form JSON context (keep yours)
alter table public.saved_projections
  add column if not exists context jsonb;

create index if not exists idx_saved_projections_room_ts
  on public.saved_projections(room, timestamp desc);

alter table public.saved_projections disable row level security;

-- ---------------------------------------------------------
-- 4) Bot bookkeeping (unchanged)
-- ---------------------------------------------------------
create table if not exists public.bot_runs (
  id bigint generated by default as identity primary key,
  room text not null,
  week_start date not null,        -- Monday of the summarized week
  sent_at timestamptz not null default now()
);

create unique index if not exists ux_bot_runs_room_week
  on public.bot_runs(room, week_start);

alter table public.bot_runs disable row level security;

-- Handy view of graded bets
create or replace view public.vw_bet_logs_graded as
select *
from public.bet_logs
where lower(coalesce(result,'pending')) in ('win','loss','push');

-- ---------------------------------------------------------
-- 5) Weekly recap Edge Function wrapper + schedule (optional)
-- ---------------------------------------------------------
drop function if exists public.call_weekly_recap cascade;

create or replace function public.call_weekly_recap()
returns void
language plpgsql
as $$
declare
  resp jsonb;
begin
  select result::jsonb
    into resp
  from net.http_post(
    url     := 'https://tlazpsqahzepggskssaw.functions.supabase.co/weekly_recap',
    headers := '{"Content-Type":"application/json"}'::jsonb,
    body    := '{}'::jsonb
  );
  raise notice 'weekly_recap response: %', resp;
end;
$$;

-- Recreate weekly cron
select cron.unschedule('weekly_recap_weekly_utc') where exists (
  select 1 from cron.job where jobname = 'weekly_recap_weekly_utc'
);

select cron.schedule(
  'weekly_recap_weekly_utc',
  '0 21 * * 0',
  $$select public.call_weekly_recap();$$
);

-- ---------------------------------------------------------
-- 6) IMPORTANT: force PostgREST to reload schema cache
-- ---------------------------------------------------------
select pg_notify('pgrst', 'reload schema');

-- =========================================================
-- Core tables used by the Streamlit app (unchanged)
-- =========================================================

-- 0) Safety: if you previously added a strict result CHECK, drop it.
--    (The app sometimes uses 'deleted' or you may add new labels later.)
alter table if exists public.bet_logs
  drop constraint if exists bet_logs_result_check;

-- 1) Model settings (JSONB blobs per room)
create table if not exists public.model_settings (
  id           bigint generated by default as identity primary key,
  room         text not null,
  base_params  jsonb not null default '{}'::jsonb,
  off_weights  jsonb not null default '{}'::jsonb,
  def_weights  jsonb not null default '{}'::jsonb,
  ts           timestamptz not null default now()
);

create index if not exists idx_model_settings_room_ts
  on public.model_settings (room, ts desc);

alter table public.model_settings disable row level security;

-- 2) Bet logs used by the app and the bot
create table if not exists public.bet_logs (
  id bigint generated by default as identity primary key,
  timestamp timestamptz default now(),
  room text not null,
  bettor text,
  home text,
  away text,
  bet_type text,
  pick text,
  odds int,
  stake numeric,
  model_spread numeric,
  model_total  numeric,
  blended_spread numeric,
  blended_total  numeric,
  recommendation text,
  ev_best numeric,
  description text,
  result text default 'pending'  -- expected: pending/win/loss/push (bot ignores others)
);

-- Indexes the bot benefits from (room + result + time range)
create index if not exists idx_bet_logs_room_ts
  on public.bet_logs(room, timestamp desc);

create index if not exists idx_bet_logs_room_result_ts
  on public.bet_logs(room, result, timestamp desc);

create index if not exists idx_bet_logs_room_bettor_ts
  on public.bet_logs(room, bettor, timestamp desc);

alter table public.bet_logs disable row level security;

-- 3) Saved projections (UI manager in app)
create table if not exists public.saved_projections (
  id bigint generated by default as identity primary key,
  timestamp timestamptz default now(),
  room text not null,
  home text,
  away text,
  proj_home numeric,
  proj_away numeric,
  model_spread numeric,
  model_total numeric,
  blended_spread numeric,
  blended_total numeric,
  winner text,
  recommendation text,
  ev_best numeric,
  weather_mult numeric,
  hfa_points numeric,
  n_sims int,
  seed int
);

create index if not exists idx_saved_projections_room_ts
  on public.saved_projections(room, timestamp desc);

alter table public.saved_projections disable row level security;

-- =========================================================
-- New table for the weekly Discord recap Edge Function
-- =========================================================

-- Tracks whether we've posted the weekly message (so cron can run safely).
create table if not exists public.bot_runs (
  id bigint generated by default as identity primary key,
  room text not null,
  week_start date not null,        -- Monday (local) of the week the message summarizes
  sent_at timestamptz not null default now()
);

create unique index if not exists ux_bot_runs_room_week
  on public.bot_runs(room, week_start);

alter table public.bot_runs disable row level security;

-- (Optional) Small helper view of graded bets; handy for ad-hoc queries.
create or replace view public.vw_bet_logs_graded as
select *
from public.bet_logs
where lower(coalesce(result,'pending')) in ('win','loss','push');

-- =========================================================
-- pg_cron + pg_net schedule for weekly Edge Function call
-- =========================================================

-- Enable required extensions (safe if already enabled)
create extension if not exists pg_cron with schema extensions;
create extension if not exists pg_net  with schema extensions;

-- Wrapper to call your Edge Function (deployed with --no-verify-jwt).
-- If you later enable JWT verification for the function, switch to net.http_post_authorize
-- and include an Authorization header with a service key.
drop function if exists public.call_weekly_recap cascade;

create or replace function public.call_weekly_recap()
returns void
language plpgsql
as $$
declare
  resp jsonb;
begin
  select result::jsonb
    into resp
  from net.http_post(
    url     := 'https://tlazpsqahzepggskssaw.functions.supabase.co/weekly_recap',
    headers := '{"Content-Type":"application/json"}'::jsonb,
    body    := '{}'::jsonb
  );

  -- Optional: log response for debugging
  raise notice 'weekly_recap response: %', resp;
end;
$$;

-- Remove any previous schedules with these names (idempotent)
select cron.unschedule('weekly_recap_hourly') where exists (
  select 1 from cron.job where jobname = 'weekly_recap_hourly'
);
select cron.unschedule('weekly_recap_weekly_utc') where exists (
  select 1 from cron.job where jobname = 'weekly_recap_weekly_utc'
);

-- Schedule ONCE PER WEEK (Option B): Sunday 21:00 UTC
-- NOTE: This is 3:00 pm CST and 4:00 pm CDT (time shifts with DST).
select cron.schedule(
  'weekly_recap_weekly_utc',
  '0 21 * * 0',
  $$select public.call_weekly_recap();$$
);

-- You can test immediately with:
-- select public.call_weekly_recap();

-- To remove the weekly job later:
-- select cron.unschedule('weekly_recap_weekly_utc');

-- To see scheduled jobs:
-- select * from cron.job order by jobid;
